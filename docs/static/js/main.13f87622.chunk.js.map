{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCat","useState","inputValue","setInputValue","onSubmit","e","preventDefault","length","c","console","log","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imagenes","useFetchGifs","GifExpertApp","categorias","setCategorias","categoria","i","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAAa,EAEHC,mBAAS,IAFN,mBAEhCC,EAFgC,KAEpBC,EAFoB,KAqBvC,OACI,sBAAMC,SAbW,SAACC,GAClBA,EAAEC,iBAGEJ,EAAWK,OAAS,IAEpBP,GAAO,SAAAQ,GAAC,OAAKN,GAAL,mBAAoBM,OAC5BL,EAAc,KAElBM,QAAQC,IAAI,iBAIZ,SAEI,uBACIC,KAAK,OACLC,MAAOV,EACPW,SAvBc,SAACR,GACvBI,QAAQC,IAAIL,EAAES,OAAOF,OACrBT,EAAcE,EAAES,OAAOF,a,+BCTlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DACJ,mCAETC,EAHa,iDAGmCC,UAAUH,GAH7C,6BACJ,oCADI,SAIAI,MAAMF,GAJN,cAIbG,EAJa,gBAKIA,EAAKC,OALT,uBAKXC,EALW,EAKXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAK,OAAEF,QAAF,IAAEA,OAAF,EAAEA,EAAKE,MACZV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXvB,kBAeZM,GAfY,4CAAH,sDCEPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAGrC,OACI,sBAAKc,UAAU,6CAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,IACJ,2BCLCO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EAEZf,mBAAS,CAC/BsB,KAAM,GACNa,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAetC,OARAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAK,SAAAC,GAAQ,OAAIH,EAAS,CACvBf,KAAMkB,EACNL,SAAS,SAElB,CAACpB,IAEGqB,EDX2BK,CAAa1B,GAAjCa,EAHuB,EAG7BN,KAAca,EAHe,EAGfA,QAEtB,OACI,qCACI,6BAAKpB,IACJoB,GAAW,mBAAGJ,UAAU,mCAAb,yBACZ,qBAAKA,UAAU,YAAf,SAGQH,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEatBgB,EA3BM,WAAM,MAGa1C,mBAAS,CAAC,cAHvB,mBAGhB2C,EAHgB,KAGJC,EAHI,KASvB,OACI,qCACI,8CACA,cAAC,EAAD,CAAa7C,OAAQ6C,IACrB,uBAEA,6BAEQD,EAAWnB,KAAI,SAACqB,EAAWC,GAEvB,OAAO,cAAC,EAAD,CAAyB/B,SAAU8B,GAArBA,YChB7CE,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.13f87622.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCat }) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        console.log(e.target.value);\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        //inputValue.length > 2 && setCat(c => [...c, inputValue]);\n        if (inputValue.length > 2) {\n            //setCat(c => [...c, inputValue]); //la mas antigua primero\n            setCat(c => [inputValue, ...c]); //la mas nueva primero\n            setInputValue('');\n        }\n        console.log('Submit event');\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            {/* <h2> {inputValue} </h2> */}\n            <input\n                type='text'\n                value={inputValue}\n                onChange={handleInputChange} />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCat: PropTypes.func.isRequired\n}\n","export const getGifs = async (category) => {\n    const apiKey = 'zisU3LQ02JT6Hkdr3Vzzxs2NoM5V6Juv';\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=${apiKey}`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img?.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({ id, title, url }) => {\n\n    //console.table(id, title, url)\n    return (\n        <div className='card animate__animated animate__backInLeft'>\n            <img src={url} alt={title} />\n            <p>{title}</p>\n            <hr />\n        </div>\n    )\n}\n","import React, { useState, useEffect } from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n    //renombarmos data a images solo para ordenar data:images se podria haber ocupado el nombre data no mas\n    const { data: images, loading } = useFetchGifs(category);\n\n    return (\n        <>\n            <h3>{category}</h3>\n            {loading && <p className='animate__animated animate__flash'>Cargando...</p>}\n            <div className='card-grid'>\n\n                {\n                    images.map(img => (\n                        <GifGridItem\n                            key={img.id}\n                            {...img} />\n                    ))\n                }\n\n            </div>\n        </>\n    )\n}\n","import { useState, useEffect } from \"react\";\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    })\n\n    useEffect(() => {  //Hace que solo se ejecute una vez getGifs al inicio\n        getGifs(category)\n            .then(imagenes => setState({\n                data: imagenes,\n                loading: false\n            }));\n    }, [category])\n\n    return state; // el estat es data:[], loading: true\n\n}","import { useState } from \"react\";\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid'\n\nconst GifExpertApp = () => {\n\n    //const categorias = ['One Punch', 'Samurai X', 'Dragon Ball'];\n    const [categorias, setCategorias] = useState(['One Punch']);\n    /* const handleAdd = () => {\n        //setCategorias([...categorias, 'Hunter X Hunter']);\n        setCategorias(cats => [...cats, 'Hunter X Hunter'])\n    } */\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCat={setCategorias} />\n            <hr />\n            {/* <button onClick={handleAdd}> Hunter X Hunter </button> */}\n            <ol>\n                {\n                    categorias.map((categoria, i) => {\n                        /* return <li key={categoria}> {categoria} </li> */\n                        return <GifGrid key={categoria} category={categoria} />\n                    })\n                }\n            </ol>\n        </>\n    )\n}\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n//import App from './App';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n\n\n\n//reportWebVitals();\n"],"sourceRoot":""}